snippet	main
	program main
		implicit none
		${0}
	end program main
snippet	ii
	integer::
snippet itf
	interface
		${0}
	end interface
snippet	rr
	real(8)::
snippet	cc
	complex(8)::
snippet	ss
	character(len=${1:80})::${0}
snippet	ia
	integer,allocatable::
snippet	ra
	real(8),allocatable::
snippet	ca
	complex(8),allocatable::
snippet	ip
	integer,parameter::
snippet	rp
	real(8),parameter::
snippet	cp
	complex,parameter::
snippet	ipn
	implicit none
snippet	pi
	real(8),parameter::pi=acos(-1.d0)
snippet	ran
	call random_number(${1:r1})
snippet	do
	do ${1:i}=1,${2:N}
		${0}
	end do
snippet do2 "do 2"
	do i=1,${1:N}
		do j=1,${2:N}
			${0}
		end do
	end do
snippet	doc
	do concurrent(${1:i}=1:${2:N})
		${0}
	end do
snippet	if "if"
	if(${1})then
		${0}
	end if
snippet	ife "if-else"
	if(${1})then
		${2}
	else
		${0}
	end if
snippet	ifc "if-elseif-then"
	if(${1})then
		${2}
	elseif(${3})then
		${0}
	end if
snippet	open
	open(${1:10},file="${2:1.txt}")
	${0}
	close($1)
snippet	mod
	module ${1}
		implicit none
		${2}
	${3:contains}
	end module $1
snippet	sub
	subroutine ${1}(${2})
		${0}
	end subroutine $1
snippet	fi
	function ${1}(${2}) result(f1)
		integer::f1
		${0}
	end function $1
snippet	fr
	function ${1}(${2}) result(f1)
		real(8)::f1
		${0}
	end function $1
snippet	fc
	function ${1}(${2}) result(f1)
		complex(8)::f1
		${0}
	end function $1
snippet	type
	type ${1}
		${0}
	end type $1
snippet	a
	${1:a}(${2})${0}
snippet	w
	write(${1:*},*)${0}
snippet	wf
	write(${1:*},"(${2})")${0}
snippet	re
	read(*,*)${0}
snippet	rf
	read(${1:10},*)${0}
snippet	ot
	call omp_set_num_threads(4)
snippet	ore
	!\$omp parallel do reduction(${1:+}:${2:total})
		${0}
	!\$omp end parallel do
snippet	odo
	!\$omp parallel do
		${0}
	!\$omp end parallel do
snippet	mpi
	include 'mpif.h'
	integer::nprocs,ierr,myid
	call mpi_init(ierr)
	call mpi_comm_size(mpi_comm_world,nprocs,ierr)
	call mpi_comm_rank(mpi_comm_world,myid,ierr)
	${0}
	call mpi_finalize(ierr)
snippet	bcast
	call mpi_bcast(${1:para},${2:number},${3:datatype},${4:cpuid},mpi_comm_world,ierr)
snippet	gather
	call mpi_gather(${1:para},${2:number},${3:datatype},${4:para_recv},$2,$3,${4:0}mpi_comm_world,ierr)
snippet reduce
	call mpi_allreduce(${1:para},${2:temp},${3:number},${4:datatype},mpi_sum,mpi_comm_world,ierr)
snippet time
	integer::time1,time2
	integer::time_rate
	call system_clock(time1,time_rate)
	call system_clock(time2,time_rate)
	write(*,*)(time2-time1)/real(time_rate)
snippet eye
	${1:a}=0.d0
	do concurrent(i=1:n)
		$1(i,i)=1.d0
	end do
snippet barrier
	call mpi_barrier(mpi_comm_world,ierr)
snippet sum
	${1:a}=0.d0
	do i=1,${2:n}
		$1=$1+${3:some}
	end do
snippet block
	${1:test}:block
		${0}
	end block ${1}

